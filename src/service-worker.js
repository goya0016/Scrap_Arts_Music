/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { StaleWhileRevalidate } from "workbox-strategies";
import { CacheableResponsePlugin } from "workbox-cacheable-response";
import { CacheFirst } from "workbox-strategies";
// import { ExpirationPlugin } from 'workbox-expiration'

//const { generateSW } = require('workbox-build')

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },

  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.

  //caching the files
  ({ url }) => url.origin === self.location.origin, // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "files",

    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  }),

  ({ request }) => request.destination === "image",
  new CacheFirst({
    //caching images
    cacheName: "images",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
let staticName = `static-cache-2`;
let dynamicName = "dynamic-cache-1";

self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});
self.addEventListener("install", (ev) => {
  let listOfStaticFiles = [
    "/",
    "../public/index.html",
    "../public/404.html",
    "../src/*",
    "../src/Media/backgroundImage.png",
  ];
  ev.waitUntil(
    caches.open(staticName).then((cache) => {
      console.log("saving all the static files");
      cache.addAll(listOfStaticFiles);
    })
  );
  //don't wait for the old SW to stop working before installing
  //self.skipWaiting();
  console.log(`Service Worker installed`);
}); // installing the service worker
self.addEventListener("activate", (ev) => {
  ev.waitUntil(
    caches.keys().then((keys) => {
      //console.log(keys);
      return Promise.all(
        keys
          .filter((key) => key !== staticName && key !== dynamicName)
          .map((key) => caches.delete(key))
      );
    })
  );
}); // activating the service worker after install

self.addEventListener("fetch", (ev) => {
  //the webpage has asked for a resource
  //ev.request is the request for the resource
  console.log(`Webpage asked for ${ev.request.url}`);
  ev.respondWith(
    caches
      .match(ev.request)
      .then((cacheRes) => {
        //we are checking ALL the static and dynamic caches
        //cacheRes could be "undefined"

        return (
          cacheRes ||
          fetch(ev.request).then((fetchRes) => {
            //url is the full URL, not just the path
            if (fetchRes.status !== 404) {
              return caches.open(dynamicName).then((cache) => {
                if (ev.request.url) {
                  //cache the request if it does NOT come from our API
                  //OR it comes from our API and uses 'GET'
                  console.log("PUTTING IN DYNAMIC", ev.request.url);
                }
                //need to use clone if we are going to return the file to the browser
                cache.put(ev.request.url, fetchRes.clone());
                //check the headers for a content-type for custom responses
                return fetchRes;
              });
            } else {
              //failed to fetch
              throw new Error("failed to fetch");
            }
          })
        );
      })
      .catch((err) => {
        //offline handler
        console.warn(err); //failed to fetch
        let url = new URL(ev.request.url);
        if (url.pathname.indexOf(".html") > -1) {
          return caches.match("/404.html");
        }
        return caches.match("/index.html");
        //handle other stuff...
      })
  );
});
// Any other custom service worker logic can go here.
